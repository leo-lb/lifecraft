// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Draw from "./draw.bs.js";
import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Board from "./board.bs.js";
import * as Global from "./global.bs.js";
import * as Caml_int32 from "../node_modules/bs-platform/lib/es6/caml_int32.js";

var pointer = {
  contents: {
    x: 0,
    y: 0,
    i: 0,
    j: 0,
    inside: false,
    selecting: false
  }
};

var state = {
  contents: {
    size: {
      x: 3,
      y: 3
    },
    board: Global.lmatrix_create(3, 3, /* Dead */0),
    previous: /* [] */0,
    seeds: /* [] */0
  }
};

function update(state, $$event) {
  var board;
  if (typeof $$event === "number") {
    switch ($$event) {
      case /* Nothing */0 :
          board = state.board;
          break;
      case /* Next */1 :
          board = Board.clamp(Board.next(state.board));
          break;
      case /* Previous */2 :
          board = List.hd(state.previous);
          break;
      case /* Reset */3 :
          board = Global.lmatrix_create(3, 3, /* Dead */0);
          break;
      
    }
  } else {
    switch ($$event.tag | 0) {
      case /* Click */0 :
          board = Board.clamp(Board.flip(state.board, $$event[0], $$event[1]));
          break;
      case /* ClickThenNext */1 :
          board = Board.next(Board.flip(state.board, $$event[0], $$event[1]));
          break;
      case /* Select */2 :
          board = state.board;
          break;
      case /* SetBoard */3 :
          board = Board.clamp($$event[0]);
          break;
      
    }
  }
  var previous;
  if (typeof $$event === "number") {
    switch ($$event) {
      case /* Next */1 :
          previous = /* :: */[
            state.board,
            state.previous
          ];
          break;
      case /* Previous */2 :
          previous = List.tl(state.previous);
          break;
      case /* Nothing */0 :
      case /* Reset */3 :
          previous = state.previous;
          break;
      
    }
  } else {
    previous = $$event.tag === /* Select */2 ? state.previous : /* :: */[
        state.board,
        state.previous
      ];
  }
  var size_x = List.length(board);
  var size_y = List.length(board) === 0 ? 0 : List.length(List.hd(board));
  var size = {
    x: size_x,
    y: size_y
  };
  return {
          size: size,
          board: board,
          previous: previous,
          seeds: state.seeds
        };
}

function send($$event) {
  state.contents = update(state.contents, $$event);
  pointer.contents = pointer.contents;
  Draw.draw(state.contents);
  return Draw.draw_selection(pointer.contents.x, pointer.contents.y);
}

function mousedown(x, y) {
  var init = pointer.contents;
  pointer.contents = {
    x: init.x,
    y: init.y,
    i: init.i,
    j: init.j,
    inside: init.inside,
    selecting: true
  };
  return send(/* Click */Block.__(0, [
                Caml_int32.div(x, Caml_int32.div(canvas.width, state.contents.size.x)),
                Caml_int32.div(y, Caml_int32.div(canvas.height, state.contents.size.y))
              ]));
}

function mouseup(param) {
  var init = pointer.contents;
  pointer.contents = {
    x: init.x,
    y: init.y,
    i: init.i,
    j: init.j,
    inside: init.inside,
    selecting: false
  };
  return /* () */0;
}

function mousemove(x, y) {
  var init = pointer.contents;
  pointer.contents = {
    x: x,
    y: y,
    i: init.i,
    j: init.j,
    inside: init.inside,
    selecting: init.selecting
  };
  if (state.contents.size.x !== 0 && state.contents.size.y !== 0) {
    return send(/* Select */Block.__(2, [
                  Caml_int32.div(x, Caml_int32.div(canvas.width, state.contents.size.x)),
                  Caml_int32.div(y, Caml_int32.div(canvas.height, state.contents.size.y))
                ]));
  } else {
    return /* () */0;
  }
}

function keydown(str) {
  var tmp;
  switch (str) {
    case "ArrowLeft" :
        tmp = /* Previous */2;
        break;
    case " " :
    case "ArrowRight" :
        tmp = /* Next */1;
        break;
    case "Escape" :
        tmp = /* Reset */3;
        break;
    default:
      console.log(str);
      tmp = /* Nothing */0;
  }
  return send(tmp);
}

function reset(param) {
  return send(/* Reset */3);
}

function previous(param) {
  return send(/* Previous */2);
}

function next(param) {
  return send(/* Next */1);
}

function save(param) {
  var seed_array = $$Array.of_list(List.map($$Array.of_list, state.contents.board));
  console.log(seed_array);
  var seed_json = (JSON.stringify(seed_array));
  add_seed("Some name", seed_json);
  return /* () */0;
}

function set_state(state_str) {
  var my_array = ( JSON.parse(state_str) );
  var my_state = $$Array.to_list($$Array.map($$Array.to_list, my_array));
  return send(/* SetBoard */Block.__(3, [my_state]));
}

bind_set_state_to_js(set_state);

bind_mousemove(mousemove);

bind_mousedown(mousedown);

bind_mouseup(mouseup);

bind_keydown(keydown);

bind_button(".next", next);

bind_button(".previous", previous);

bind_button(".reset", reset);

bind_button(".save", save);

send(/* Click */Block.__(0, [
        1,
        1
      ]));

send(/* Click */Block.__(0, [
        1,
        2
      ]));

send(/* Click */Block.__(0, [
        1,
        3
      ]));

send(/* Click */Block.__(0, [
        1,
        2
      ]));

set_state("[[0,0,0,0],[0,1,1,0],[0,0,0,0]]");

export {
  
}
/* state Not a pure module */
