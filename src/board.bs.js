// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Matrix from "./matrix.bs.js";
import * as Tea_cmd from "../node_modules/bucklescript-tea/src-ocaml/tea_cmd.js";
import * as Caml_array from "../node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_builtin_exceptions from "../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

function clamp(board) {
  var x1;
  try {
    x1 = Matrix.findi((function (param) {
            return $$Array.exists((function (param) {
                          return /* Alive */1 === param;
                        }), param);
          }), board);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      x1 = 0;
    } else {
      throw exn;
    }
  }
  var x2;
  try {
    x2 = Matrix.findri((function (param) {
            return $$Array.exists((function (param) {
                          return /* Alive */1 === param;
                        }), param);
          }), board);
  }
  catch (exn$1){
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      x2 = 0;
    } else {
      throw exn$1;
    }
  }
  var y1;
  try {
    y1 = Matrix.vfindi((function (param) {
            return /* Alive */1 === param;
          }), board);
  }
  catch (exn$2){
    if (exn$2 === Caml_builtin_exceptions.not_found) {
      y1 = 0;
    } else {
      throw exn$2;
    }
  }
  var y2;
  try {
    y2 = Matrix.vfindri((function (param) {
            return /* Alive */1 === param;
          }), board);
  }
  catch (exn$3){
    if (exn$3 === Caml_builtin_exceptions.not_found) {
      y2 = 0;
    } else {
      throw exn$3;
    }
  }
  var board2 = $$Array.make_matrix((x2 - x1 | 0) + 3 | 0, (y2 - y1 | 0) + 3 | 0, /* Dead */0);
  Matrix.blit(board, x1, y1, board2, 1, 1, (x2 - x1 | 0) + 1 | 0, (y2 - y1 | 0) + 1 | 0);
  return board2;
}

function next(rule, board) {
  var is_alive = function (coords) {
    var j = coords[1];
    var i = coords[0];
    if (i < 0 || i >= board.length || j < 0 || j >= Caml_array.caml_array_get(board, 0).length) {
      return 0;
    } else {
      var row = Caml_array.caml_array_get(board, i);
      var cell = Caml_array.caml_array_get(row, j);
      if (cell) {
        return 1;
      } else {
        return 0;
      }
    }
  };
  var sum_neighbourg = function (x, y) {
    var coords = List.map((function (coords) {
            return /* tuple */[
                    x + coords[0] | 0,
                    y + coords[1] | 0
                  ];
          }), /* :: */[
          /* tuple */[
            -1,
            -1
          ],
          /* :: */[
            /* tuple */[
              -1,
              0
            ],
            /* :: */[
              /* tuple */[
                -1,
                1
              ],
              /* :: */[
                /* tuple */[
                  0,
                  -1
                ],
                /* :: */[
                  /* tuple */[
                    0,
                    1
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      -1
                    ],
                    /* :: */[
                      /* tuple */[
                        1,
                        0
                      ],
                      /* :: */[
                        /* tuple */[
                          1,
                          1
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]);
    var neighbourg = List.map(is_alive, coords);
    return List.fold_left((function (prim, prim$1) {
                  return prim + prim$1 | 0;
                }), 0, neighbourg);
  };
  var next_one = function (i, j, e) {
    var n = sum_neighbourg(i, j);
    if (e) {
      if (n === 3 || n === 2) {
        return /* Alive */1;
      } else {
        return /* Dead */0;
      }
    } else if (n !== 3 && (n !== 6 || !rule)) {
      return /* Dead */0;
    } else {
      return /* Alive */1;
    }
  };
  return Matrix.mapij(next_one, board);
}

function flip(i, j, board) {
  return Matrix.mapij((function (param, param$1, param$2) {
                var i$1 = i;
                var j$1 = j;
                var i2 = param;
                var j2 = param$1;
                var e = param$2;
                if (i$1 === i2 && j$1 === j2) {
                  if (e) {
                    return /* Dead */0;
                  } else {
                    return /* Alive */1;
                  }
                } else {
                  return e;
                }
              }), board);
}

function resize(board, x, y) {
  var w = Matrix.width(board);
  var h = Matrix.height(board);
  var a = Matrix.make(x, y, /* Dead */0);
  Matrix.blit(board, 0, 0, a, x, y, w, h);
  return a;
}

function update(state, $$event) {
  var w = Matrix.width(state.board);
  var h = Matrix.height(state.board);
  var board;
  if (typeof $$event === "number") {
    switch ($$event) {
      case /* Next */1 :
          board = next(state.rule, state.board);
          break;
      case /* Previous */2 :
          var match = state.previous;
          board = match ? match[0] : Matrix.make(0, 0, /* Dead */0);
          break;
      case /* Clamp */4 :
          board = clamp(state.board);
          break;
      case /* Reset */5 :
          board = Matrix.make(Matrix.width(state.board), Matrix.height(state.board), /* Dead */0);
          break;
      default:
        board = state.board;
    }
  } else {
    switch ($$event.tag | 0) {
      case /* Click */0 :
          board = flip($$event[0], $$event[1], state.board);
          break;
      case /* ClickThenNext */1 :
          board = next(state.rule, flip($$event[0], $$event[1], state.board));
          break;
      case /* SetBoard */3 :
          board = $$event[0];
          break;
      case /* SetBoardFromSeed */4 :
          board = ( JSON.parse($$event[0]) );
          break;
      case /* SetX */6 :
          board = resize(state.board, $$event[0], h);
          break;
      case /* SetY */7 :
          board = resize(state.board, w, $$event[0]);
          break;
      default:
        board = state.board;
    }
  }
  var cmd;
  if (typeof $$event === "number") {
    cmd = $$event === /* Clamp */4 || !state.auto_clamp ? /* NoCmd */0 : Tea_cmd.msg(/* Clamp */4);
  } else if ($$event.tag === /* KeyPressed */9) {
    var match$1 = $$event[0].key_code;
    cmd = match$1 !== 13 && match$1 !== 32 ? /* NoCmd */0 : Tea_cmd.msg(/* Next */1);
  } else {
    cmd = state.auto_clamp ? Tea_cmd.msg(/* Clamp */4) : /* NoCmd */0;
  }
  return /* tuple */[
          board,
          cmd
        ];
}

export {
  clamp ,
  next ,
  flip ,
  resize ,
  update ,
  
}
/* No side effect */
