// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as $$Array from "../node_modules/bs-platform/lib/es6/array.js";
import * as Global from "./global.bs.js";

function prune_top(_board) {
  while(true) {
    var board = _board;
    if (board) {
      if (List.exists((function (e) {
                return e === /* Alive */1;
              }), board[0])) {
        return board;
      } else {
        _board = board[1];
        continue ;
      }
    } else {
      return /* [] */0;
    }
  };
}

function prune_bottom(board) {
  return List.rev(prune_top(List.rev(board)));
}

function prune_left(_board) {
  while(true) {
    var board = _board;
    var column = List.map(List.hd, board);
    if (List.length(board) === 0) {
      return /* [] */0;
    } else if (List.exists((function (e) {
              return e === /* Alive */1;
            }), column)) {
      return board;
    } else {
      _board = List.map(List.tl, board);
      continue ;
    }
  };
}

function prune_right(board) {
  return List.map(List.rev, prune_left(List.map(List.rev, board)));
}

function prune(board) {
  var board$1 = prune_top(board);
  return prune_left(prune_right(List.rev(prune_top(List.rev(board$1)))));
}

function resize(board) {
  if (board === /* [] */0) {
    return /* :: */[
            /* :: */[
              /* Dead */0,
              /* [] */0
            ],
            /* [] */0
          ];
  } else {
    var board2 = List.map((function (row) {
            return /* :: */[
                    /* Dead */0,
                    List.append(row, /* :: */[
                          /* Dead */0,
                          /* [] */0
                        ])
                  ];
          }), board);
    var length = List.length(List.hd(board2));
    var column = List.init(length, (function (param) {
            return /* Dead */0;
          }));
    return /* :: */[
            column,
            List.append(board2, /* :: */[
                  column,
                  /* [] */0
                ])
          ];
  }
}

function clamp(board) {
  return resize(prune(board));
}

function next(board) {
  var is_alive = function (coords) {
    var j = coords[1];
    var i = coords[0];
    if (i < 0 || i >= List.length(board) || j < 0 || j >= List.length(List.hd(board))) {
      return 0;
    } else {
      var row = List.nth(board, i);
      var cell = List.nth(row, j);
      if (cell) {
        return 1;
      } else {
        return 0;
      }
    }
  };
  var sum_neighbourg = function (x, y) {
    var coords = List.map((function (coords) {
            return /* tuple */[
                    x + coords[0] | 0,
                    y + coords[1] | 0
                  ];
          }), /* :: */[
          /* tuple */[
            -1,
            -1
          ],
          /* :: */[
            /* tuple */[
              -1,
              0
            ],
            /* :: */[
              /* tuple */[
                -1,
                1
              ],
              /* :: */[
                /* tuple */[
                  0,
                  -1
                ],
                /* :: */[
                  /* tuple */[
                    0,
                    1
                  ],
                  /* :: */[
                    /* tuple */[
                      1,
                      -1
                    ],
                    /* :: */[
                      /* tuple */[
                        1,
                        0
                      ],
                      /* :: */[
                        /* tuple */[
                          1,
                          1
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]);
    var neighbourg = List.map(is_alive, coords);
    return List.fold_left((function (prim, prim$1) {
                  return prim + prim$1 | 0;
                }), 0, neighbourg);
  };
  var next_one = function (i, j, e) {
    var n = sum_neighbourg(i, j);
    if (e) {
      if (n === 3 || n === 2) {
        return /* Alive */1;
      } else {
        return /* Dead */0;
      }
    } else if (n !== 3) {
      return /* Dead */0;
    } else {
      return /* Alive */1;
    }
  };
  return Global.lmatrix_mapij(next_one, board);
}

function flip_if_equal(i, j, i2, j2, e) {
  if (i === i2 && j === j2) {
    if (e) {
      return /* Dead */0;
    } else {
      return /* Alive */1;
    }
  } else {
    return e;
  }
}

function flip(board, i, j) {
  return Global.lmatrix_mapij((function (param, param$1, param$2) {
                return flip_if_equal(i, j, param, param$1, param$2);
              }), board);
}

function update(state, param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Nothing */0 :
          return state.board;
      case /* Next */1 :
          var board = next(state.board);
          return resize(prune(board));
      case /* Previous */2 :
          var match = state.previous;
          if (match) {
            return match[0];
          } else {
            return /* [] */0;
          }
      case /* Reset */3 :
          return Global.lmatrix_create(state.size.x, state.size.y, /* Dead */0);
      
    }
  } else {
    switch (param.tag | 0) {
      case /* Click */0 :
          var board$1 = flip(state.board, param[0], param[1]);
          return resize(prune(board$1));
      case /* ClickThenNext */1 :
          var board$2 = next(flip(state.board, param[0], param[1]));
          return resize(prune(board$2));
      case /* SetBoard */3 :
          return resize(prune(param[0]));
      case /* SetBoardFromSeed */4 :
          var my_array = ( JSON.parse(param[0]) );
          var board$3 = $$Array.to_list($$Array.map($$Array.to_list, my_array));
          return resize(prune(board$3));
      case /* SetX */6 :
          var x = param[0];
          var h = List.length(state.board);
          if (h > 0) {
            var w = List.length(List.hd(state.board));
            if (w < x) {
              return List.map((function (row) {
                            return List.append(List.init(w - x | 0, (function (param) {
                                              return /* Dead */0;
                                            })), row);
                          }), state.board);
            } else {
              return state.board;
            }
          } else {
            return state.board;
          }
      case /* Select */2 :
      case /* AddSeed */5 :
      case /* SetY */7 :
          return state.board;
      case /* KeyPressed */8 :
          var match$1 = param[0].key_code;
          if (match$1 !== 13) {
            if (match$1 !== 32) {
              return state.board;
            } else {
              var board$4 = next(state.board);
              return resize(prune(board$4));
            }
          } else {
            var board$5 = next(state.board);
            return resize(prune(board$5));
          }
      
    }
  }
}

export {
  prune_top ,
  prune_bottom ,
  prune_left ,
  prune_right ,
  prune ,
  resize ,
  clamp ,
  next ,
  flip_if_equal ,
  flip ,
  update ,
  
}
/* No side effect */
